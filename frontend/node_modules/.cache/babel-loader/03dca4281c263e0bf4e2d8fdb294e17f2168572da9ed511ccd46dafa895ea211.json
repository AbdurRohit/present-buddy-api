{"ast":null,"code":"import os from 'os';\nimport { aiplatform } from '@google/generative-ai';\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"../ethereal-creek-408406-f1ec98bcf577.json\";\nexport function initialize_gemini_client(project_id, location, endpoint_id) {\n  const client_options = {\n    \"api_endpoint\": \"{location}-aiplatform.googleapis.com\"\n  };\n  const client = new aiplatform.gapic.PredictionServiceClient(client_options = client_options);\n  const endpoint = client.endpoint_path(project = project_id, location = location, endpoint = endpoint_id);\n  return endpoint;\n}\nexport async function generate_text(endpoint, prompt) {\n  const request = {\n    endpoint: endpoint,\n    instances: [aiplatform.gapic.Instance(content = prompt)]\n  };\n  const [response] = await client.predict(request);\n  for (const prediction of response.predictions) {\n    return prediction;\n  }\n}","map":{"version":3,"names":["os","aiplatform","environ","initialize_gemini_client","project_id","location","endpoint_id","client_options","client","gapic","PredictionServiceClient","endpoint","endpoint_path","project","generate_text","prompt","request","instances","Instance","content","response","predict","prediction","predictions"],"sources":["/home/abdur/Documents/Ongoing/present-buddy-api/frontend/src/pages/geminiApiUtils.js"],"sourcesContent":["import os from 'os';\nimport { aiplatform } from '@google/generative-ai';\n\nos.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"../ethereal-creek-408406-f1ec98bcf577.json\";\n\nexport function initialize_gemini_client(project_id, location, endpoint_id) {\n    const client_options = {\"api_endpoint\": \"{location}-aiplatform.googleapis.com\"};\n    const client = new aiplatform.gapic.PredictionServiceClient(client_options=client_options);\n    const endpoint = client.endpoint_path(\n        project=project_id, location=location, endpoint=endpoint_id\n    );\n    return endpoint; \n}\n\nexport async function generate_text(endpoint, prompt) {\n    const request = {\n        endpoint: endpoint,\n        instances: [aiplatform.gapic.Instance(content=prompt)] \n    };\n    const [response] = await client.predict(request);\n\n    for (const prediction of response.predictions) {\n        return prediction; \n    }\n}"],"mappings":"AAAA,OAAOA,EAAE,MAAM,IAAI;AACnB,SAASC,UAAU,QAAQ,uBAAuB;AAElDD,EAAE,CAACE,OAAO,CAAC,gCAAgC,CAAC,GAAG,4CAA4C;AAE3F,OAAO,SAASC,wBAAwBA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,EAAE;EACxE,MAAMC,cAAc,GAAG;IAAC,cAAc,EAAE;EAAsC,CAAC;EAC/E,MAAMC,MAAM,GAAG,IAAIP,UAAU,CAACQ,KAAK,CAACC,uBAAuB,CAACH,cAAc,GAACA,cAAc,CAAC;EAC1F,MAAMI,QAAQ,GAAGH,MAAM,CAACI,aAAa,CACjCC,OAAO,GAACT,UAAU,EAAEC,QAAQ,GAACA,QAAQ,EAAEM,QAAQ,GAACL,WACpD,CAAC;EACD,OAAOK,QAAQ;AACnB;AAEA,OAAO,eAAeG,aAAaA,CAACH,QAAQ,EAAEI,MAAM,EAAE;EAClD,MAAMC,OAAO,GAAG;IACZL,QAAQ,EAAEA,QAAQ;IAClBM,SAAS,EAAE,CAAChB,UAAU,CAACQ,KAAK,CAACS,QAAQ,CAACC,OAAO,GAACJ,MAAM,CAAC;EACzD,CAAC;EACD,MAAM,CAACK,QAAQ,CAAC,GAAG,MAAMZ,MAAM,CAACa,OAAO,CAACL,OAAO,CAAC;EAEhD,KAAK,MAAMM,UAAU,IAAIF,QAAQ,CAACG,WAAW,EAAE;IAC3C,OAAOD,UAAU;EACrB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}